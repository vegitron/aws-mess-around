- hosts: all
  vars:
    base_dir: "/data/"

  tasks:
#    - name: update apt
#      apt: update_cache=yes
#      sudo: yes
#
#    - name: Install the packages needed for app deployment
#      apt: name=git state=latest
#      sudo: yes
#
    - apt: name=libmysqlclient-dev state=latest
      sudo: yes

#    - apt: name=python-virtualenv state=latest
#      sudo: yes
#
#    - apt: name=nodejs state=latest
#      sudo: yes
#
#    - apt: name=npm state=latest
#      sudo: yes
#
#    - apt: name=python-dev state=latest
#      sudo: yes
#
#    - apt: name=libxml2-dev state=latest
#      sudo: yes
#
#    - apt: name=libxslt1-dev state=latest
#      sudo: yes
#
#    - apt: name=zlib1g-dev state=latest
#      sudo: yes
#
#    # Ubuntu installs node.js as nodejs, not node :(
#    - file: src=/usr/bin/nodejs dest=/usr/bin/node state="link" force="yes"
#      sudo: yes
#
#    - npm: name=less global=yes
#      sudo: yes
#
#    - name: Create our groups/membership
#      group: name=logwriters state=present
#    - user: name=ubuntu groups=logwriters append=yes
#    - user: name=www-data groups=logwriters append=yes
#
#    - name: Create our directory structure
#      file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/"
#      sudo: yes
#
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/app/"
#    # This isn't really necessary, but it makes it easy when testing the deployment process multiple times on a host
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/app/{{ build_number }}"
#    - file: owner="ubuntu" group=logwriters mode="2775" state="directory" path="/data/logs/"
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/statics/"
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/statics/{{ build_number }}"
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/certs/"
#
#    - copy: src="{{ files_dir }}/certs/ca-bundle.crt" dest="/data/certs/ca-bundle.crt" group="{{ file_group }}"
#    - copy: src="{{ files_dir }}/certs/{{ webservice_client_cert_name }}" dest="/data/certs/{{ webservice_client_cert_name }}" group="{{ file_group }}"
#      when: webservice_client_cert_name != "" and webservice_client_cert_name is defined
#    - copy: src="{{ files_dir }}/certs/{{ webservice_client_key_name }}" dest="/data/certs/{{ webservice_client_key_name }}" group="{{ file_group }}"
#      when: webservice_client_key_name != "" and webservice_client_key_name is defined
#
    - git: repo={{git_repository}} dest=/data/app/{{ build_number }} version={{git_version}}
#
#    # This is from the post-checkout playbook
#    - name: Create a virtualenv for the build
#      command: virtualenv -p {{ python_interpreter|default('python2.7') }} /data/app//{{ build_number }}
#
#    - name: Copy over requirements for the project level
#      copy: src="{{ files_dir }}/project_requirements.txt" dest="/data/app/project_requirements.txt" mode="0664"
#
#    - name: Install the PermissionsLogging module - needed to make sure our logs are group-writable
#      pip: virtualenv="/data/app/{{ build_number }}" requirements="/data/app/project_requirements.txt"
#
    - name: Perform upgrades with pip.  May (but should not) take a while
      pip: virtualenv="/data/app/{{ build_number }}" requirements="/data/app/{{ build_number }}/{{ item }}" extra_args="-U"
      with_items: pip_upgrades_files
      when: pip_upgrades_files is defined

    - name: Install requirements with pip.  May (probably will) take a while
      pip: virtualenv="/data/app/{{ build_number }}" requirements="/data/app/{{ build_number }}/{{ item }}"
      with_items: pip_requirements_files
#
#    - name: Create project directory
#      file: group="{{ file_group }}" mode="2775" state="directory" path="/data/app/{{ build_number }}/project"
#
    - name: Create the project settings file
      template: src="templates/project_settings.py" dest="/data/app/{{ build_number }}/project/settings.py" group="{{ file_group }}" mode="664"
#
#    - name: Create the project urls file
#      template: src="templates/project_urls.py" dest="/data/app/{{ build_number }}/project/urls.py" group="{{ file_group }}" mode="644"
#
#    - name: Create the __init__ file
#      command: touch "/data/app/{{ build_number }}/project/__init__.py" creates="/data/app/{{ build_number }}/project/__init__.py"
#
#    - name: Create manage.py file
#      template: src="templates/manage.py" dest="/data/app/{{ build_number }}/manage.py" group="{{ file_group }}" mode="644"
#
#    - name: Create the apache config file
#      template: src="{{ apache_config_template|default('templates/apache_config') }}" dest="{{ base_dir }}/builds/{{current_build_value}}/apache_config/apache-global" group="{{ file_group }}" mode="664"
#
#    - file: owner="ubuntu" group=ubuntu mode="2775" state="directory" path="/data/wsgi/"
#    - name: Copy the wsgi file
#      template: src="templates/django.wsgi" group="{{ file_group }}" dest="/data/wsgi/django.wsgi" mode="664"
#
#    # Moving these further down, so the rest of the basics will be in place - makes it so i can restart apache by hand and get current config - useful for log permissions issues
#    - name: Collect statics
#      django_manage: virtualenv="/data/app/{{ build_number }}" app_path="/data/app/{{ build_number }}" command="collectstatic"
#
#    - name: Compress statics
#      django_manage: virtualenv="/data/app/{{ build_number }}" app_path="/data/app/{{ build_number }}" command="compress"
#      when: skip_compress_statics is not defined or not skip_compress_statics

    - name: copy arbitrary files over
      copy: src="{{ files_dir }}/{{ item.src }}" dest={{ item.dest }}
      with_items: custom_files|default([])

    - name: Install the mysql interface into our virtualenv
      pip: virtualenv="/data/app/{{ build_number }}" name="MySQL-python"

    # XXX - these should be moved out to a deployment step!
    - name: syncdb
      django_manage: virtualenv="/data/app/{{ build_number }}" app_path="/data/app/{{ build_number }}" command="syncdb"

    - name: migrate
      django_manage: virtualenv="/data/app/{{ build_number }}" app_path="/data/app/{{ build_number }}" command="migrate {{ item }}"
      with_items: migrate_apps
      when: migrate_apps

    - name: updated apache config
      template: src="templates/apache/full_apache_config.conf" dest="/etc/apache2/sites-available/custom-apache-config.conf"
      sudo: yes

    - name: Restarting Apache
      service: name=apache2 state=restarted
      sudo: yes
